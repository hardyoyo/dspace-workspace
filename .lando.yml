name: dspace
proxy:
  apiserver:
    - dspace-api.local.sandbox
  frontend:
    - dspace.local.sandbox:4000
  # keycloak:
  #   - keycloak.local.sandbox:8080
  #   - keycloak.local.sandbox:8443
services:
  # might need to change this to type: 'tomcat:custom', overrides: image 'tomcat:10' if I need a newer version of Tomcat or the JDK
  apiserver:
    config: {}
    type: 'tomcat:9'
    build_as_root:
     - apt update -y && apt -qqy install psmisc
    webroot: dspace_home
    ssl: true
    sslExpose: true
    scanner: false
  frontend:
    config: {}
    type: 'node:14'
    build_as_root:
      - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
      - if [ ! -f "/etc/apt/sources.list.d/google-chrome.list" ]; then echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list; fi
      - apt update -y && apt -y install default-jre google-chrome-stable
      - wget https://raw.githubusercontent.com/SeleniumHQ/docker-selenium/trunk/NodeChrome/wrap_chrome_binary && mkdir -p /opt/bin && cp /app/wrap_chrome_binary /opt/bin/wrap_chrome_binary && chmod 755 /opt/bin/wrap_chrome_binary && /opt/bin/wrap_chrome_binary
    build:
      - yarn install --no-lockfile
    cmd:
      - yarn start
    webroot: dspace-angular
    ssl: true
    sslExpose: true
    scanner: false
    overrides:
      image: 'cypress/browsers:node14.7.0-chrome84'
      ports:
        - '4000:4000'
      environment:
        DSPACE_HOST: "0.0.0.0" # interface to which Angular should bind
        DSPACE_PORT: "4000" # The port number of the angular application
        DSPACE_NAMESPACE: "/" # The namespace of the angular application
        DSPACE_SSL: "false" # Whether the angular application uses SSL [true/false]
        DSPACE_REST_HOST: "dspace-api.local.sandbox" # The host name of the angular application
        DSPACE_REST_PORT: "80" # The port number of the REST-API application
        DSPACE_REST_NAMESPACE: "server" # The namespace of the REST-API application
        DSPACE_REST_SSL: "false" # Whether the REST-API application uses SSL [true/false]

  # keycloak:
  #   type: compose
  #   scanner: false
  #   ssl: true
  #   sslExpose: true
  #   port: 8443
  #   app_mount: delegated
  #   build_as_root:
  #     - microdnf update -y && microdnf install -y findutils util-linux-user lsof vim && useradd www-data
  #   services:
  #     user: root
  #     image: jboss/keycloak:16.1.0
  #     command: /app/keycloak/docker-entrypoint.sh
  #     environment:
  #       KEYCLOAK_USER: admin
  #       KEYCLOAK_PASSWORD: password
  #       KEYCLOAK_IMPORT: /app/keycloak/realm.json
  #       PROXY_ADDRESS_FORWARDING: 'true'
  #       LANDO_DROP_USER: root
  #       LAUNCH_JBOSS_IN_BACKGROUND: 0
  #     ports:
  #       - 8080
  #       - 8443

  solr:
    type: 'solr:8.6'
    portforward: false
  database:
    config: {}
    type: postgres
    portforward: true
    creds:
      user: postgres
      password: 
      database: dspace
    build_as_root:
      - psql -U postgres dspace -c '\x' -c 'create extension pgcrypto;'
  java:
    type: compose
    app_mount: delegated
    services:
      user: root
      image: maven:3.8.4-openjdk-11
      command: tail -f /dev/null
    build_as_root:
      - apt update -y && apt install -y ant pv
    overrides:
      environment:
        M2_HOME: "/app/.m2"
        MAVEN_CONFIG: "/app/.m2"
    scanner: false

events:
  post-start:
    - frontend: echo "\n\nREADY FOR ACTION!\n\n*** Don't forget that the DSpace-Angular front-end requires you to run some tooling before it's usable\n*** try this... lando yarn start:dev\nOH, AND IF YOU'VE JUST REBUILT, CHECK THE README, YOU HAVE LOTS LEFT TO DO.\nAt a minimum, run this... lando yarn install\n\n"

tooling:
  copy-solr-cores:
    service: solr
    cmd: cp -r /app/dspace_home/solr/* /var/solr/data/lando/data/ && echo "Solr cores copied successfully!"
    description: Copies DSpace Solr cores to the Solr data path
  # restart-tomcat:
  # # this works because the apiserver container is set up to always restart, so, killing the catalina process forces a Docker restart of the apiserver container
  #   service: apiserver
  #   cmd: catalina.sh stop
  #   user: root
  #   description: Restarts Tomcat (faster than lando restart)
  catalina.sh:
    service: apiserver
    cmd: catalina.sh
  mvn:
    service: java
    cmd: mvn
    user: www-data
    dir: /app/dspace
    description: Runs Maven commands on the DSpace apiserver
  api-unit-tests:
    service: java
    cmd: MAVEN_OPTS="-Xmx1024M -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn" mvn clean package -DskipUnitTests=false -Pdspace-rest
    dir: /app/dspace
    description: Runs unit tets on the DSpace apiserver
  api-integration-tests:
    service: java
    cmd: MAVEN_OPTS="-Xmx1024M -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn" mvn clean package -DskipIntegrationTests=false -Denforcer.skip=true -Dcheckstyle.skip=true -Dlicense.skip=true -Dxml.skip=true
    dir: /app/dspace
    description: Runs unit tets on the DSpace apiserver
  frontend-unit-tests:
    service: frontend
    cmd: yarn run config:test
    dir: /app/dspace-angular
    description: Runs unit tests on the DSpace frontend
  frontend-integration-tests:
    service: frontend
    cmd: npm run ng e2e
    dir: /app/dspace-angular
    description: Runs integration tests on the DSpace frontend
  ant:
    service: java
    cmd: ant
    user: www-data
    dir: /app/dspace/dspace/target/dspace-installer
    description: Runs Ant commands on the DSpace apiserver
  dspace:
    service: java
    cmd: bin/dspace
    dir: /app/dspace_home
  db-import <file>:
    service: ':host'
    description: Imports a dump file into a database service
    cmd: /helpers/sql-import.sh
    user: root
    options:
      host:
        description: The database service to use
        default: database
        alias:
          - h
      no-wipe:
        description: Do not destroy the existing database before an import
        boolean: true
  'db-export [file]':
    service: ':host'
    description: Exports database from a database service to a file
    cmd: /helpers/sql-export.sh
    user: root
    options:
      host:
        description: The database service to use
        default: database
        alias:
          - h
      stdout:
        description: Dump database to stdout
  psql:
    service: database
    description: Drops into a psql shell on the database service
    cmd: psql -U postgres
    options:
      host:
        description: The database service to use
        default: database
        alias:
          - h
  yarn:
    service: frontend
    description: Invokes yarn on the DSpace-Angular frontend service
    cmd: yarn
    dir: /app/dspace-angular

  validate-rest-connection:
    service: frontend
    description: Runs the test script to validate the connection between DSpace-Angular and the REST-API (requires that you've already run a script that creates the environment)
    cmd:
      - yarn run config:dev
      - ts-node --project ./tsconfig.ts-node.json scripts/test-rest.ts
    dir: /app/dspace-angular
  # kcadmin:
  #   service: keycloak
  #   user: root
  #   cmd: /opt/jboss/keycloak/bin/kcadmin
  #   dir: /opt/jboss/keycloak
  # add-user:
  #   service: keycloak
  #   user: root
  #   cmd: /opt/jboss/keycloak/bin/add-user-keycloak.sh
  #   dir: /opt/jboss/keycloak
  # reload:
  #   service: keycloak
  #   user: root
  #   cmd: /opt/jboss/keycloak/bin/jboss-cli.sh --connect command=:reload
  #   dir: /opt/jboss/keycloak
  unbork-permissions:
    service: java
    user: root
    cmd:
    - find /app/dspace \! -user www-data -print0 | pv -e -p | xargs -0 -I {} chown www-data:www-data {}
  test-whoami:
    service: java
    dir: /app/dspace
    user: www-data
    cmd:
      - whoami
